This
  https://docs.vagrantup.com/v2/provisioning/salt.html
explains how to set up Vagrant to do a masterless salt provision.

Under the vagrant root directory (the one containing the Vagrantfile)
there is a salt/minion file containing only the line 
  file_client: local

I'm using 22.27.82. salt.states.pkgrepo to add the Ice repository for
Ubuntu to the host. See: 
  http://docs.saltstack.com/en/latest/ref/states/all/salt.states.pkgrepo.html
NOTE: you also need to add '- fromrepo: trusty-zeroc' to the pkg.installs 
(I believe).

Details on how to add the apt package repo came from
  http://www.zeroc.com/download.html
specifically, the section on Ubuntu 14.04 (Trusty Tahr).
See:
  http://download.zeroc.com/Ice/3.5/ubuntu/dists/trusty-zeroc/Contents-amd64
for a listing of what's in trusty-zeroc. Don't trust what ubuntu
suggests: ice35-services was not the right way to get icegridadmin.

--

Have set up a multi-machine Vagrantfile for icebox-*. See
  https://docs.vagrantup.com/v2/multi-machine/index.html

To run the salt provisioner on the vm itself:
  sudo salt-call --local state.highstate
To run it via Vagrant:
  vagrant provision icebox-<n>

To get IceGridGUI-3.5.1.jar, install icegrid somewhere
(e.g. provision one of the vagrant boxes) and copy it from
/usr/share/java. Run it as java -jar IceGridGUI-3.5.1.jar&.

I'd like to use the salt stuff to provision non-vagrant images.

Next task: make a registry service that we can start and stop.
The DATA_ROOT will depend on the environment. For a vagrant
development image it will be /home/vagrant/data. For production
it might be /home/icecap/data (or just /icecap/data?).

The APP_ROOT will be /vagrant for a vagrant dev image. In order to
make the slice files importable, APP_ROOT/python will have to be added
to the PYTHONPATH. It's ugly but slice2py does not seem to make it
easy to do any other way.

--

Start the registry, if not already running:

  cd /vagrant
  make
  icegridregistry --Ice.Config=/vagrant/registry.cfg &

To run the demo:

  cd /vagrant/servers
  python demo_server.py --Ice.Config=/vagrant/server.cfg

Then in another shell:

  cd /vagrant/scripts
  python demo_client.py

At this point demo_server.py should print "Hello World!".

--

To run the registry admin tool:

  icegridadmin --Ice.Config=/vagrant/client.cfg

--

Figure out how to deploy without using 'vagrant provision'.
We can still use Vagrant to create VMs but we only go as far as
installing the salt minion.
The real object of this is to figure out how to use salt to deal with
the different requirements while reusing the salt configs.
